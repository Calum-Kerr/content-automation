name: DEV.to Post Scheduler

on:
  # Run twice daily at consistent times every day
  schedule:
    # Daily posting times (13:30 and 18:30 UTC+1 = 12:30 and 17:30 UTC)
    - cron: '30 12 * * *'   # 13:30 (12:30 UTC) Every day
    - cron: '30 17 * * *'   # 18:30 (17:30 UTC) Every day
    
    # Weekly cleanup of old artifacts (Sundays at 3 AM UTC)
    - cron: '0 3 * * 0'     # Weekly cleanup

  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  # Weekly cleanup job
  cleanup_artifacts:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 3 * * 0'
    permissions:
      actions: write  # Required for artifact management
    
    steps:
      - name: Cleanup old posting artifacts
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🧹 Starting weekly artifact cleanup...');
            
            // Get all artifacts from the repository
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            console.log(`Found ${artifacts.data.artifacts.length} total artifacts`);
            
            // Find posting-state artifacts older than 7 days
            const cutoffDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const isPostingState = artifact.name.startsWith('posting-state');
              const isOld = new Date(artifact.created_at) < cutoffDate;
              return isPostingState && isOld;
            });
            
            console.log(`Found ${oldArtifacts.length} old posting-state artifacts to delete`);
            
            // Delete old artifacts
            let deleted = 0;
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`✅ Deleted artifact: ${artifact.name} (${artifact.created_at})`);
                deleted++;
              } catch (error) {
                console.log(`❌ Failed to delete artifact: ${artifact.name} - ${error.message}`);
              }
            }
            
            // Keep only the most recent 3 posting-state artifacts as safety buffer
            const allPostingArtifacts = artifacts.data.artifacts
              .filter(artifact => artifact.name.startsWith('posting-state'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            if (allPostingArtifacts.length > 3) {
              const excessArtifacts = allPostingArtifacts.slice(3);
              console.log(`🔄 Keeping only 3 most recent artifacts, removing ${excessArtifacts.length} excess`);
              
              for (const artifact of excessArtifacts) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  console.log(`✅ Deleted excess artifact: ${artifact.name}`);
                  deleted++;
                } catch (error) {
                  console.log(`❌ Failed to delete excess artifact: ${artifact.name} - ${error.message}`);
                }
              }
            }
            
            console.log(`✨ Cleanup completed: ${deleted} artifacts deleted`);

  post_to_dev:
    runs-on: ubuntu-latest
    if: github.event.schedule != '0 3 * * 0'  # Skip posting during cleanup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to ensure we have all blog posts

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown python-dotenv

      - name: Download state file if exists
        uses: actions/download-artifact@v4
        with:
          name: posting-state
          path: .
        continue-on-error: true

      - name: Download backup state file if primary fails
        uses: actions/download-artifact@v4
        with:
          name: posting-state-backup
          path: .
        continue-on-error: true

      - name: Create or restore state file
        run: |
          # Check if we have a primary state file
          if [ -f "dev_posting_state.json" ]; then
            echo "Primary state file exists"
            # Validate the JSON
            if ! python -m json.tool dev_posting_state.json > /dev/null 2>&1; then
              echo "Primary state file is corrupted, attempting backup recovery"
              rm -f dev_posting_state.json
            fi
          fi
          
          # If no primary state file, check for backup
          if [ ! -f "dev_posting_state.json" ] && [ -f "dev_posting_state_backup.json" ]; then
            echo "Restoring from backup state file"
            cp dev_posting_state_backup.json dev_posting_state.json
          fi
          
          # If still no state file, create default
          if [ ! -f "dev_posting_state.json" ]; then
            echo '{"last_post_time":"","posted_articles":[],"current_index":0,"total_posts":0}' > dev_posting_state.json
            echo "Created default state file"
          fi
          
          # Always create a backup of current state
          cp dev_posting_state.json dev_posting_state_backup.json
          echo "Created backup of state file"

      - name: Post to DEV.to
        env:
          DEV_TO_API_KEY: ${{ secrets.DEV_TO_API_KEY }}
        run: |
          # Check if posting is enabled
          if [ -f ".github/workflows/posting_config.json" ]; then
            enabled=$(python -c "import json; print(json.load(open('.github/workflows/posting_config.json'))['enabled'])")
            if [ "$enabled" = "False" ]; then
              echo "Posting is disabled in configuration. Skipping."
              exit 0
            fi
          fi
          
          # Run the posting script
          python .github/workflows/post_to_dev_action.py

      - name: Upload state files with retry
        uses: actions/upload-artifact@v4
        with:
          name: posting-state
          path: dev_posting_state.json
          retention-days: 90
        if: always()
        continue-on-error: true

      - name: Upload backup state file with retry
        uses: actions/upload-artifact@v4
        with:
          name: posting-state-backup
          path: dev_posting_state_backup.json
          retention-days: 90
        if: always()
        continue-on-error: true

      - name: Emergency state backup via commit (if uploads fail)
        run: |
          # If artifact uploads fail, commit state to repository as emergency backup
          if [ -f "dev_posting_state.json" ]; then
            # Check if state file has changed
            if git diff --quiet dev_posting_state.json 2>/dev/null; then
              echo "No state changes to commit"
            else
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add dev_posting_state.json
              git commit -m "Emergency backup: Update posting state [skip ci]" || echo "Nothing to commit"
              git push || echo "Failed to push emergency backup"
              echo "Emergency state backup committed to repository"
            fi
          fi
        if: failure()
        continue-on-error: true

      - name: Create alternative state persistence
        run: |
          # Create a timestamped backup as another safety measure
          timestamp=$(date +"%Y%m%d_%H%M%S")
          cp dev_posting_state.json "state_backup_${timestamp}.json"
          echo "Created timestamped backup: state_backup_${timestamp}.json"
        if: always()

      - name: Upload timestamped backup
        uses: actions/upload-artifact@v4
        with:
          name: posting-state-timestamped-${{ github.run_number }}
          path: state_backup_*.json
          retention-days: 30
        if: always()
